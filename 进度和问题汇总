一、遇到的问题？
1.并发和for循环消耗时间对比
20条并发->630.916396ms
20条for循环->12.428980563s

2.普通ping多线程也无法达到需求
30 个ip 运行时间为21s （不达标）
修改为fping作为底层收集器 

3.客户端 golang cannot use xx (type []string) as type string in argument to exec.Command（错误）

4.json rpc 需要conn.Close() 不然rpc主程序结束后才会中断

二、进度
1.2019-4-1客户端 1.实现并行操作 2.自动上传ip
2.2019-4-2服务端 1.客户端上传的ip写入数据库 2.返回数据库中的pinglist
3.2019-4-15客户端 1.使用fping，传统ping并发效果不好舍弃
4.2019-4-24客户端 1.Command不能使用[]string,解决
5.2019-5-10前端  1.嵌套循环各种报错，解决（python，及时关闭游标和con）



三、改进建议
后端
1.可以将数据换成rrd数据库或者其他时序数据库（使用rrd环形数据库理想点）
2.客户端添加熔断机制N次cpu超过5%自动退出，待cpu恢复正常自动恢复。
3.使用websocket上传在线状态
4.能够支持热更新
5.可在控制台手动停止所有服务（慎重）
6.离线的客户端可以将数据以txt本地保存，待恢复后进行数据传送

前端
1.支持点数据“延时数字”查看历史延迟
